import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

import '../../data/models/chat_message.dart';
import '../../data/models/chat_room.dart';

final chatProvider = StateNotifierProvider<ChatNotifier, AsyncValue<List<ChatMessage>>>((ref) {
  return ChatNotifier();
});

final chatStreamProvider = StreamProvider.family<List<ChatMessage>, String>((ref, chatRoomId) {
  // Assuming chatRoomId is already generated by the combination of userId and psychologistId
  return FirebaseFirestore.instance
      .collection('chatRooms')
      .doc(chatRoomId)
      .collection('messages')
      .orderBy('timestamp', descending: false)
      .snapshots()
      .map((snapshot) {
    return snapshot.docs.map((doc) => ChatMessage.fromJson(doc.data())).toList();
  });
});

final userChatRoomsProvider = StreamProvider.family<List<ChatRoom>, String>((ref, userId) {
  return FirebaseFirestore.instance
      .collection("chatRooms")
      .where("userId", isEqualTo: userId)
      .orderBy("lastMessageTimestamp", descending: true)
      .snapshots()
      .map((snapshot) => snapshot.docs.map((doc) => ChatRoom.fromJson(doc.data())).toList());
});

final psychologistChatRoomsProvider = StreamProvider.family<List<ChatRoom>, String>((ref, psychologistId) {
  return FirebaseFirestore.instance
      .collection("chatRooms")
      .where("psychologistId", isEqualTo: psychologistId)
      .orderBy("lastMessageTimestamp", descending: true)
      .snapshots()
      .map((snapshot) => snapshot.docs.map((doc) => ChatRoom.fromJson(doc.data())).toList());
});

class ChatNotifier extends StateNotifier<AsyncValue<List<ChatMessage>>> {
  ChatNotifier() : super(const AsyncValue.loading());

  final _firestore = FirebaseFirestore.instance;

  Future<void> sendMessage({
    required String userId,
    required String psychologistId,
    required String message,
    required String userAvatar,
    required String userFullName,
    required String psychologistAvatar,
    required String psychologistFullName,
    required bool isPsychologist,
  }) async {
    try {
      final chatRoomId = isPsychologist ? "${psychologistId}_$userId" : "${userId}_$psychologistId";
      final chatRoomRef = FirebaseFirestore.instance.collection("chatRooms").doc(chatRoomId);
      final messagesRef = chatRoomRef.collection("messages");

      final chatRoomSnapshot = await chatRoomRef.get();

      if (!chatRoomSnapshot.exists) {
        await chatRoomRef.set({
          "chatRoomId": chatRoomId,
          "userId": userId,
          "psychologistId": psychologistId,
          "lastMessage": message,
          "lastMessageTimestamp": Timestamp.now(),
          "userAvatar": userAvatar,
          "userFullName": userFullName,
          "psychologistAvatar": psychologistAvatar,
          "psychologistFullName": psychologistFullName,
        });
      } else {
        await chatRoomRef.update({
          "lastMessage": message,
          "lastMessageTimestamp": Timestamp.now(),
        });
      }

      await messagesRef.add({
        "senderId": userId,
        "receiverId": psychologistId,
        "message": message,
        "timestamp": Timestamp.now(),
      });

      // await _firestore.collection('chats').doc(chatRoomId).set(ChatRoom().toJson(), SetOptions(merge: true));
    } catch (e) {
      print('Error sending message: $e');
    }
  }
}
